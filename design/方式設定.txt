<ハードウェア構成>
・使用ハードウェア
サーバー 1台
    -通信機能
        --接続相手の識別
        --データ送信
        --データ受信
    -参加プレイヤーの管理
        --接続相手の記録
        --接続状況の監視・アプリへの通知
    -ゲーム機能
        --ゲームに必要なリソースの保持・管理
        --ゲームの進行管理

クライアント 複数台(上限未設定)
    -通信機能
        --サーバーからの受信
        --サーバーへの送信
        --サーバーからのレスポンス待機
    -画面表示機能
        --サーバーからのレスポンスを画面に表示
    -クライアントの入力を受付

・ハードウェア構造
サーバー1台に対して、各クライアントが接続する

・配置図
付属"配置図.png"参照



<実装方法>
・サーバーサイド
コンポーネント
    1.webサーバー機能
        基本的なリソースの送受信手段として提供するサーバー
        HTMLやCSSの基本ファイルから、ゲーム画像や音などのリソースの提供を行う

        +HTTP通信機能
            webサーバーとしての基本通信機能
            -通信の確立
            -データの受信
            -データの送信

        +リクエスト処理
            HTTPの規格に沿ったリクエストを処理して、レスポンスを作成、返信する機能
            -リクエストヘッダ解析
            -要求ファイル読み取り、送信

    2.ゲームサーバー機能
        ゲーム機能を提供するサーバー
        クライアントのマッチング、ゲーム状況の保持管理を行う

        +WebSocket通信機能
            ゲームデータのやり取り(リソースを除く)において使用
            -通信の確立
            -データの受信
            -データの送信

        +マッチング機能
            クライアントの対戦相手を決定するための管理機能
            -部屋の作成状況を保持
            -部屋の作成状況を提供
            -クライアント情報の保持・記録
            -クライアントの参加状況の提供

        +オセロゲーム機能
            オセロのゲーム自体のプログラム
            クライアント毎にデータ領域を確保して、管理を行う
            -オセロとしてのゲーム機能
        
使用言語
    C++17

ライブラリ・フレームワーク
    Boost1_72_0(通信機能の実装用)

その他
    HTTP機能部分はxamppで代替する可能性あり

・クライアントサイド
コンポーネント
    1.ゲーム機能
        ゲームに関するデータの送受信や画面への反映など、ゲームのための機能群

        +WebSocket通信機能
            ゲームデータのやり取り(リソースを除く)において使用
            -通信の確立
            -データの受信
            -データの送信
        
        +マッチング機能
            マッチング画面で必要となる処理         
            -マッチング状況の取得・表示  
            -部屋の作成に関するデータの送信
            -部屋への参加に関するデータの送信

        +オセロゲーム機能
            ゲームに必要となる処理
            -試合状況の取得・表示
            -プレイヤーの操作データの送信

使用言語
    HTML5,CSS,JavaScript

ライブラリ・フレームワーク
    Bootstrap(レイアウト用)
    WebSocket API(通信機能用)

