<サーバーサイド>
処理手順
    1.Webサーバーの起動
        1.1 通信管理
            1.1.1 リスナーを起動、非同期で受信待機
                1.1.1.1 受信時にセッションを生成、ソケット情報を渡し、非同期で1.2の処理を行わせる
                1.1.1.2 再び、非同期で受信を管理させる
        1.2 セッション処理
            1.2.1 受信メッセージの解析
            1.2.2 要求リソースを読み込む
            1.2.3 リソースの送信

    2.ゲームサーバーの起動
        2.1 通信管理
            2.1.1 リスナーを起動、非同期で受信待機
                2.1.1.1 受信時にセッションを生成、ソケット情報を渡し、非同期で2.2の処理を行わせる
                2.1.1.2 再び、非同期で受信を管理させる
        2.2 セッション処理
            2.2.1 受信メッセージの解析、付随データを取り出す
            2.2.2 マッチング情報のレスポンス
                2.2.2.1 現在の部屋の作成状況および部屋の情報を取得
                2.2.2.2 各部屋の情報をレスポンスとして返す
                2.2.2.3 メッセージ待機
                2.2.2.4 メッセージ解析、内容によって1.4と1.5どちらかに分岐
            2.2.3 マッチング処理(部屋の作成)
                2.2.3.1 ルームクラスのインスタンスを生成
                2.2.3.2 インスタンスにクライアント情報を記録
                2.2.3.3 クライアント側に部屋の作成データを送信
                2.2.3.4 部屋に他プレイヤーが参加するまで通信状態と部屋の状態を管理、切断があった場合、部屋を削除する
                2.2.3.5 プレイヤーがそろい次第、クライアントに通知。その後、2.2.5を開始
            2.2.4 マッチング処理(部屋への参加)
                2.2.4.1 ルームクラスにクライアント情報を記録
                2.2.4.2 ルームクラスに記録されたクライアント全てに情報を通知
                2.2.4.3 プレイヤーがそろい次第、2.2.5を開始
            2.2.5 ゲーム処理
                2.2.5.1 ゲームの準備
                2.2.5.2 先手クライアントの入力待機
                2.2.5.3 ゲーム更新、全クライアントに更新結果送信
                2.2.5.4 後手クライアントの入力待機
                2.2.5.5 ゲーム更新、全クライアントに更新結果送信
                2.2.5.6 ゲームが終了したら、最終結果を送信
            2.2.6 セッションの終了
                2.2.6.1 ルームクラスに登録されたクライアントのソケットを切断
                2.2.6.2 ルームクラスのインスタンスを削除

    3.メッセージ処理
        3.1 メッセージ処理を行わせるためのスレッドを作成
        3.2 キューに入れられたメッセージを処理する

    4.各サーバーを終了させる
        4.1 各セッションの処理を終了させる
        4.2 ソケットを切断
        4.3 メッセージ処理を終了させる
        4.4 各スレッドの終了待ち

作成モジュールとクラス
・HttpServerモジュール
    1.HttpServerクラス  //HttpServer内の各インスタンスを管理する
    2.Listnerクラス     //接続の確立を行う
    3.Sessionクラス     //接続後のクライアントとの通信処理の流れを管理する
    4.Responserクラス   //レスポンスを行う
    5.Contentクラス     //レスポンスを生成する   

・GameServerモジュール
    1.GameServerクラス  //GameServer内の各インスタンスを管理する
    2.Listnerクラス     //接続の確立を行う   
    3.Sessionクラス     //接続後のクライアントとの処理を管理する
    4.RoomManagerクラス //Roomインスタンスの作成、保持、削除など管理を行う
    5.Roomクラス        //クライアント情報やゲームのインスタンス保持
    6.Clientクラス      //クライアント情報を保持するクラス
    7.Gameクラス        //各ゲームクラスのインターフェース
    8.Othelloクラス     //オセロゲームの情報を保持、進行の管理を行う

クラス図
    付属"HttpServerクラス図.png","GameServerクラス図.png"参照
